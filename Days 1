1.Merge Intervals:


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& nums) {
        int n= nums.size();

        vector<vector<int>>ans;

        sort(nums.begin(), nums.end());

        for(int i=0;i<n;i++){

            if(i!=0 && ans.back()[1]>=nums[i][0]){
                ans.back()[1]= max( ans.back()[1],nums[i][1]);
            }
           else ans.push_back({nums[i][0],nums[i][1]});

        }
        return ans;
    }
};


2. Merge two sorted array without extra space

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
      /*  
        int i=0 ;
        int j=0;
        if(n==0) return;
        vector<int> ans;
        while(i<m && j<n){
            if(nums1[i]<=nums2[j]){
                ans.push_back(nums1[i]);
                i++;
            }
            else{
                ans.push_back(nums2[j]);
                j++;
            }
        }
        while(i<m){

            ans.push_back(nums1[i]);
            i++;
        }
        while(j<n){

            ans.push_back(nums2[j]);
            j++;
        }
        for(int i=0;i<ans.size();i++){
            nums1[i]= ans[i];
        }
        return ;*/

        int i=m-1;int j=n-1;
        if(n==0) return ;
        if(m==0)nums1=nums2;
        int k= nums1.size()-1;
        while(i>=0 && j>=0){
            if(nums1[i]>=nums2[j]){

                swap(nums1[k],nums1[i]);
                i--;
                k--;
            }else{

                nums1[k]=nums2[j];
                j--;
                k--;
            }
        }
        while(i>=0){
            nums1[k]=nums1[i];
            i--;
            k--;
        }
          while(j>=0){
            nums1[k]=nums2[j];
            j--;
            k--;
        }


    }


};
